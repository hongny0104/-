import streamlit as st
import pandas as pd

st.set_page_config(page_title="입찰최적가분석기", layout="wide")

st.title("📊 입찰최적가분석기")

# 낙찰 입찰률 기준 (사업 규모별)
입찰률기준 = {"5억 미만": 0.8675, "10억 미만": 0.855, "10억 이상": 0.8}

# 사업 규모별 배점 기준 (사업수행능력, 지역업체참여, 경영상태, 입찰가격, 기술자보유(감점), 계약질서(감점))
기준점수 = {
    "5억 미만": {"사업수행능력": 35, "지역업체참여": 8, "경영상태": 2, "입찰가격": 55, "기술자보유": -10, "계약질서": -1},
    "10억 미만": {"사업수행능력": 45, "지역업체참여": 8, "경영상태": 2, "입찰가격": 45, "기술자보유": -10, "계약질서": -1},
    "10억 이상": {"사업수행능력": 65, "지역업체참여": 8, "경영상태": 2, "입찰가격": 22, "기술자보유": -10, "계약질서": -1},
}

st.header("1. 기본 정보 입력")
col1, col2 = st.columns(2)
with col1:
    기초금액 = st.number_input("기초금액 입력 (₩)", min_value=1000000, step=1000000, format="%d")
with col2:
    사업규모 = st.selectbox("사업 규모", ["5억 미만", "10억 미만", "10억 이상"])

현재기준 = 기준점수[사업규모]
낙찰입찰률 = 입찰률기준[사업규모]
입찰가격_기준 = round(기초금액 * 낙찰입찰률)

st.header("2. 심사 항목별 당사 평점 입력")

# 입력 가능한 최대 점수는 기준점수의 절댓값 기준으로 설정, 감점 항목은 음수 범위로 설정
col1, col2, col3 = st.columns(3)
with col1:
    점_사업 = st.number_input("사업수행능력", min_value=0.0, max_value=현재기준["사업수행능력"], step=0.5, format="%.1f")
    점_지역 = st.number_input("지역업체참여도", min_value=0.0, max_value=현재기준["지역업체참여"], step=0.5, format="%.1f")
with col2:
    점_경영상태 = st.number_input("경영상태", min_value=0.0, max_value=현재기준["경영상태"], step=0.5, format="%.1f")
with col3:
    점_기술자 = st.number_input("기술자보유 감점 (0 또는 음수)", min_value=현재기준["기술자보유"], max_value=0.0, step=1.0, format="%d")
    점_계약질서 = st.number_input("계약질서 감점 (0 또는 음수)", min_value=현재기준["계약질서"], max_value=0.0, step=1.0, format="%d")

st.header("3. 예정가격 시뮬레이션 및 입찰가격 계산")

# 예가율 리스트 -3% ~ +3% (0.5% 단위)
예가율목록 = [x/10 for x in range(-30,31,5)]  # -3.0, -2.5, ..., 3.0
예정가격표 = {f"{율:+.1f}%": round(기초금액 * (1 + 율 / 100)) for 율 in 예가율목록}

# 예정가격 중 중간 4개 값 평균 (인덱스 5~8)
중간예정가격값들 = list(예정가격표.values())[5:9]
예정가격_평균 = round(sum(중간예정가격값들)/len(중간예정가격값들))

# 낙찰 입찰률에 의한 입찰가격
입찰가격_기준 = round(기초금액 * 낙찰입찰률)

# 예정가격 및 입찰가격 테이블 표시
예정가격_df = pd.DataFrame({
    "예정가격(원)": [f"{v:,}" for v in 예정가격표.values()],
    "입찰가격(원)": [f"{round(v * 낙찰입찰률):,}" for v in 예정가격표.values()],
}, index=예정가격표.keys())

st.dataframe(예정가격_df)

st.header("4. 입찰 점수 계산 및 낙찰 가능성 평가")

# 입찰률 계산 (사용자 입력 입찰가격 기준, 기본값은 낙찰 입찰가격 기준)
선택입찰가 = st.selectbox(
    "입찰가격 선택 (예정가격 시뮬레이션 참고)",
    options=[round(v * 낙찰입찰률) for v in 예정가격표.values()],
    format_func=lambda x: f"{x:,}"
)

선택입찰률 = 선택입찰가 / 예정가격_평균 if 예정가격_평균 > 0 else 0
입찰률차이 = abs(낙찰입찰률 - 선택입찰률)

# 가격 점수 산정 (사업규모별 감점 가중치)
if 기초금액 < 500_000_000:
    감점계수 = 400
elif 기초금액 < 1_000_000_000:
    감점계수 = 200
else:
    감점계수 = 100

가격점수 = 현재기준['입찰가격'] - 감점계수 * 입찰률차이
가격점수 = max(0, 가격점수)  # 최소 0점 보장

# 기술 점수 합산
기술점수 = 점_사업 + 점_지역 + 점_경영상태 + 점_기술자 + 점_계약질서
# 총점 = 기술점수 + 가격점수 (100점 초과 시 100으로 제한)
총점 = 기술점수 + 가격점수
if 총점 > 100:
    총점 = 100

# 낙찰 기준점수 (사업규모별)
if 기초금액 < 500_000_000:
    기준점수 = 95
    낙찰조건설명 = "95점 이상이어야 하며, 95점에 가장 근접한 자가 낙찰 대상입니다."
elif 기초금액 < 1_000_000_000:
    기준점수 = 95
    낙찰조건설명 = "95점에 가장 근접한 자가 낙찰 대상입니다."
else:
    기준점수 = 92
    낙찰조건설명 = "92점에 가장 근접한 자가 낙찰 대상입니다."

st.markdown(f"- **기술점수 합계**: {기술점수:.2f} / {현재기준['사업수행능력'] + 현재기준['지역업체참여'] + 현재기준['경영상태'] + abs(현재기준['기술자보유']) + abs(현재기준['계약질서'])}")
st.markdown(f"- **가격점수**: {가격점수:.2f} / {현재기준['입찰가격']}")
st.markdown(f"- **총점 (기술점수 + 가격점수)**: {총점:.2f} / 100")

if 총점 < 기준점수:
    st.error(f"❌ 총점 {총점:.2f}점은 기준점수 {기준점수}점 미만으로 낙찰 불가")
else:
    차이 = abs(총점 - 기준점수)
    st.success(f"✅ 총점 {총점:.2f}점 → 기준점수 {기준점수}점과 차이 {차이:.2f}점")
    st.info(f"📌 {낙찰조건설명}")

