import streamlit as st
import pandas as pd

st.title("입찰최적가분석기 - 예정가격 시뮬레이션과 입찰가격 분석 분리")

# 기초금액 입력
기초금액 = st.number_input("기초금액 입력 (₩)", min_value=1000000, step=1000000, format="%d")

# 예정가격 시뮬레이션 (변경 금지)
st.header("1. 예정가격 시뮬레이션 (수정 불필요)")
예가_변동률 = [-3, -2, -1, 0, 1, 2, 3]  # ±3% 범위
예정가격표 = {}
for 변동 in 예가_변동률:
    예정가격표[변동] = int(기초금액 * (1 + 변동 / 100))

예정가격_df = pd.DataFrame({
    "변동률(%)": 예가_변동률,
    "예정가격(원)": [f"{v:,}" for v in 예정가격표.values()]
})
st.dataframe(예정가격_df)

# 예정가격 평균(±3% 중 4개 다빈도 예상 가격 평균)
예정가격_평균 = int(sum(list(예정가격표.values())[2:6]) / 4)
st.markdown(f"예정가격 평균 (±1%, 0%, +1%, +2% 구간 평균): **{예정가격_평균:,}원**")

# ------------------------------------------------
# 입찰가격 분석 - 예정가격 시뮬레이션과 분리

st.header("2. 입찰가격 직접 입력 및 점수 계산")

# 입찰가격 직접 입력
입찰가격 = st.number_input("입찰가격 입력 (₩)", min_value=1000000, step=100000, format="%d", value=예정가격_평균)

# 낙찰하한율 (예시 86.745%)
낙찰하한율 = 0.86745

# 입찰가격 점수 산출 기준 (예정가격 평균 기준)
# 예) 점수 = 60점 만점 기준으로 점수 산출 (낙찰하한율 적용)
if 입찰가격 < 예정가격_평균 * 낙찰하한율:
    입찰가격점수 = 0
else:
    낙찰점수기준 = 60
    점수 = 낙찰점수기준 * (1 - (입찰가격 - 예정가격_평균) / 예정가격_평균)
    입찰가격점수 = max(0, 점수)

입찰가격점수 = round(입찰가격점수, 2)

st.markdown(f"입찰가격: **{입찰가격:,}원**")
st.markdown(f"입찰가격 점수 (예정가격 평균 기준): **{입찰가격점수}점** (최대 60점 기준)")

# ------------------------------------------------
# 기술점수 및 기타 점수 입력

st.header("3. 기술점수 및 감점 입력")

사업수행능력 = st.number_input("사업수행능력 점수", min_value=0.0, max_value=35.0, value=30.0)
지역업체참여 = st.number_input("지역업체참여 점수", min_value=0.0, max_value=8.0, value=5.0)
경영상태 = st.number_input("경영상태 점수", min_value=0.0, max_value=2.0, value=2.0)
기술자감점 = st.number_input("기술인력 감점", min_value=-10.0, max_value=0.0, value=0.0)
계약질서감점 = st.number_input("계약질서 감점", min_value=-1.0, max_value=0.0, value=0.0)

총점 = (사업수행능력 + 지역업체참여 + 경영상태 + 기술자감점 + 계약질서감점 + 입찰가격점수)
총점 = round(총점, 2)

st.markdown(f"▶ 총점: **{총점}점 / 100점 만점**")

# 낙찰 가능성 예시 (95점 이상 낙찰 가능)
if 총점 >= 95:
    st.success("✅ 낙찰 가능성이 높음")
else:
    st.warning("⚠️ 낙찰 가능성이 낮음")



