import streamlit as st
import pandas as pd

st.set_page_config(page_title="입찰최적가분석기", layout="wide")
st.title("📊 입찰최적가분석기")

# 설정값
입찰률기준 = {"5억 미만": 0.8675, "10억 미만": 0.855, "10억 이상": 0.8}
기술점수_최대 = {"5억 미만": 35+8+2-10-1, "10억 미만": 45+8+2-10-1, "10억 이상": 65+8+2-10-1}
입찰가격_최대점수 = {"5억 미만": 60, "10억 미만": 50, "10억 이상": 30}

# 1. 기본 정보 입력
st.header("1. 기본 정보 입력")
col1, col2 = st.columns(2)
with col1:
    기초금액 = st.number_input("기초금액 입력 (₩)", min_value=1000000, step=1000000, format="%d")
with col2:
    사업규모 = st.selectbox("사업 규모", ["5억 미만", "10억 미만", "10억 이상"])

# 기준점수 및 낙찰 입찰률 셋팅
기준점수 = {
    "5억 미만": {"사업수행능력": 35, "지역업체참여": 8, "경영상태": 2, "입찰가격": 60, "기술자보유": -10, "계약질서": -1},
    "10억 미만": {"사업수행능력": 45, "지역업체참여": 8, "경영상태": 2, "입찰가격": 50, "기술자보유": -10, "계약질서": -1},
    "10억 이상": {"사업수행능력": 65, "지역업체참여": 8, "경영상태": 2, "입찰가격": 30, "기술자보유": -10, "계약질서": -1},
}
현재기준 = 기준점수[사업규모]
낙찰입찰률 = 입찰률기준[사업규모]

# 2. 예정가격 시뮬레이션 (수정하지 마세요)
st.header("2. 예정가격 시뮬레이션")
예가율목록 = [x for x in range(-30, 31, 5)]
예정가격표 = {율: round(기초금액 * (1 + 율 / 100)) for 율 in 예가율목록}
예정가격_평균 = round(sum(list(예정가격표.values())[5:9]) / 4)

예정가격표_df = pd.DataFrame.from_dict(예정가격표, orient='index', columns=['예정가격']).rename_axis('예가율(%)')
예정가격표_df['예정가격'] = 예정가격표_df['예정가격'].apply(lambda x: f"{x:,}")
st.write(예정가격표_df)

st.markdown(f"예정가격 평균(±3% 중 4개 다빈도 평균): **{예정가격_평균:,}원**")

# 3. 심사 항목별 당사 평점 입력
st.header("3. 심사 항목별 당사 평점 입력")
col1, col2, col3 = st.columns(3)
with col1:
    점_사업 = st.number_input("사업수행능력", min_value=0.0, max_value=현재기준["사업수행능력"], step=0.5)
    점_지역 = st.number_input("지역업체참여도", min_value=0.0, max_value=현재기준["지역업체참여"], step=0.5)
with col2:
    점_경영상태 = st.number_input("경영상태", min_value=0.0, max_value=현재기준["경영상태"], step=0.5)
with col3:
    점_기술자 = st.number_input("기술자보유 감점 (없으면 0)", min_value=현재기준["기술자보유"], max_value=0.0, step=1.0)
    점_계약질서 = st.number_input("계약질서 감점 (없으면 0)", min_value=현재기준["계약질서"], max_value=0.0, step=1.0)

# 4. 입찰가격 선택 및 점수 계산 (예정가격 시뮬레이션 표 기준)
st.header("4. 입찰가격 선택 및 점수 계산")

# 예정가격 시뮬레이션 입찰가격 리스트 (낙찰 입찰률 적용)
입찰가격_리스트 = [int(round(가격 * 낙찰입찰률)) for 가격 in list(예정가격표.values())]
입찰가격_리스트_표시 = [f"{x:,}" for x in 입찰가격_리스트]

선택입찰가_인덱스 = st.selectbox("입찰가격 선택 (예정가격 시뮬레이션 참고)", list(range(len(입찰가격_리스트_표시))), format_func=lambda x: 입찰가격_리스트_표시[x])
선택입찰가 = 입찰가격_리스트[선택입찰가_인덱스]

# 선택입찰률 계산 (예정가격 평균 기준)
선택입찰률 = 선택입찰가 / 예정가격_평균 if 예정가격_평균 > 0 else 0

# 입찰률 기준 고정값 적용
if 선택입찰가 < 5_000_000_000:
    낙찰하한율_고정 = 0.8675
elif 선택입찰가 < 10_000_000_000:
    낙찰하한율_고정 = 0.855
else:
    낙찰하한율_고정 = 0.8

# 입찰가격 점수 산출 공식 - 사업규모별 최대 점수, 낙찰하한율 고정 적용
if 선택입찰률 < 낙찰하한율_고정:
    선택가격점수 = 0
else:
    점수만점 = 입찰가격_최대점수[사업규모]
    # 예: 점수는 낙찰하한율에서 입찰률 차이에 따라 선형 감소
    선택가격점수 = 점수만점 * (1 - (선택입찰률 - 낙찰하한율_고정) / (1 - 낙찰하한율_고정))
    선택가격점수 = max(0, 선택가격점수)

# 총점 계산 (기술점수 + 입찰가격 점수)
선택총점 = 점_사업 + 점_지역 + 점_경영상태 + 점_기술자 + 점_계약질서 + 선택가격점수

# 5. 결과 출력
st.markdown(f"- **선택 입찰가격**: {선택입찰가:,}원")
st.markdown(f"- **선택 입찰률**: {선택입찰률:.4f}")
st.markdown(f"- **고정 낙찰하한율**: {낙찰하한율_고정:.4f}")
st.markdown(f"- **선택 입찰가격 점수**: {선택가격점수:.2f} / {입찰가격_최대점수[사업규모]}")
st.markdown(f"- **기술점수 총합**: {점_사업 + 점_지역 + 점_경영상태 + 점_기술자 + 점_계약질서:.2f}")
st.markdown(f"- **선택 총점**: {선택총점:.2f} / 100")

# 낙찰 기준점수 판단
if 기초금액 < 500_000_000:
    기준점수 = 95
elif 기초금액 < 1_000_000_000:
    기준점수 = 95
else:
    기준점수 = 92

if 선택총점 < 기준점수:
    st.error(f"❌ 총점 {선택총점:.2f}점은 기준점수 {기준점수}점 미만으로 낙찰 불가")
else:
    st.success(f"✅ 총점 {선택총점:.2f}점 → 기준점수 {기준점수}점 이상으로 낙찰 가능")




