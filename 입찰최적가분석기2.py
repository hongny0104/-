import streamlit as st
st.set_page_config(page_title="입찰최적가분석기", layout="wide")
import pandas as pd

st.title("📊 입찰최적가분석기")

# -------------------------------
# 설정값
입찰률기준 = {"5억 미만": 0.8675, "10억 미만": 0.855, "10억 이상": 0.8}
기술점수_최소 = 95

# -------------------------------
# 사용자 입력
st.header("1. 기본 정보 입력")
col1, col2 = st.columns(2)
with col1:
    기초금액 = st.number_input("기초금액 입력 (₩)", min_value=1000000, step=1000000, format="%d")
with col2:
    사업규모 = st.selectbox("사업 규모", ["5억 미만", "10억 미만", "10억 이상"])

# -------------------------------
# 심사기준 점수표
기준점수 = {
    "5억 미만": {"사업수행능력": 35, "지역업체참여": 8, "경영상태": 2, "입찰가격": 60, "기술자보유": -10, "계약질서": -1},
    "10억 미만": {"사업수행능력": 45, "지역업체참여": 8, "경영상태": 2, "입찰가격": 50, "기술자보유": -10, "계약질서": -1},
    "10억 이상": {"사업수행능력": 65, "지역업체참여": 8, "경영상태": 2, "입찰가격": 30, "기술자보유": -10, "계약질서": -1},
}

현재기준 = 기준점수[사업규모]
낙찰입찰률 = 입찰률기준[사업규모]
입찰가격 = round(기초금액 * 낙찰입찰률)

st.header("2. 심사 항목별 당사 평점 입력")
col1, col2, col3 = st.columns(3)
with col1:
    점_사업 = st.number_input("사업수행능력", min_value=0.0, max_value=float(현재기준["사업수행능력"]), step=0.5)
    점_지역 = st.number_input("지역업체참여도", min_value=0.0, max_value=8.0, step=0.5)
with col2:
    점_경영상태 = st.number_input("경영상태", min_value=0.0, max_value=2.0, step=0.5)
with col3:
    점_기술자 = st.number_input("기술자보유 감점 (없으면 0)", min_value=-10.0, max_value=0.0, step=1.0)
    점_계약질서 = st.number_input("계약질서 감점 (없으면 0)", min_value=-1.0, max_value=0.0, step=1.0)

# -------------------------------
# 예정가격 계산
예가율목록 = [round(x, 1) for x in list(pd.Series(range(-30, 31, 5)) / 10)]
예정가격표 = {율: round(기초금액 * (1 + 율 / 100)) for 율 in 예가율목록}
예정가격_평균 = round(sum(list(예정가격표.values())[5:9]) / 4)

# -------------------------------
# 점수계산
입찰률 = 입찰가격 / 예정가격_평균 if 예정가격_평균 > 0 else 0
가격점수 = max(0, 현재기준["입찰가격"] * ((1 - 입찰률) / (1 - 낙찰입찰률))) if 입찰률 >= 낙찰입찰률 else 0
총점 = 점_사업 + 점_지역 + 점_경영상태 + 점_기술자 + 점_계약질서 + 가격점수

# -------------------------------
# 출력
st.header("3. 결과 분석")
st.subheader("예정가격 시뮬레이션")
예정가격표_df = pd.DataFrame.from_dict(예정가격표, orient='index', columns=['예정가격']).rename_axis('예가율')
예정가격표_df['입찰가격'] = (예정가격표_df['예정가격'] * 낙찰입찰률).round().astype(int)
예정가격표_df['예정가격'] = 예정가격표_df['예정가격'].apply(lambda x: f"{x:,}")
예정가격표_df['입찰가격'] = 예정가격표_df['입찰가격'].apply(lambda x: f"{x:,}")
st.write(예정가격표_df)

#st.subheader("입찰결과 분석")
#st.markdown(f"- **예정가격(평균)**: {예정가격_평균:,}원")
#st.markdown(f"- **입찰가격** (× {낙찰입찰률}): {입찰가격:,}원")
#st.markdown(f"- **입찰률**: {입찰률:.4f}")
#st.markdown(f"- **입찰가격 점수**: {가격점수:.2f} / {현재기준['입찰가격']}")
#st.markdown(f"- **기술점수 총합**: {점_사업 + 점_지역 + 점_경영상태 + 점_기술자 + 점_계약질서:.2f}")

# -------------------------------
# 📌 사용자가 입찰가를 선택하여 분석
st.subheader("입찰가격 선택 시 자동 분석")

선택입찰가 = st.selectbox("입찰가격 선택 (예정가격 시뮬레이션 참고)", [int(str(x).replace(",", "")) for x in 예정가격표_df["입찰가격"]])

# 선택된 입찰가 기준 입찰률 및 점수 재계산
선택입찰률 = 선택입찰가 / 예정가격_평균 if 예정가격_평균 > 0 else 0
입찰률차이 = abs(낙찰입찰률 - 선택입찰률)

if 기초금액 < 500_000_000:  # 5억 미만
    선택가격점수 = 현재기준['입찰가격'] - 400 * 입찰률차이
elif 기초금액 < 1_000_000_000:  # 10억 미만
    선택가격점수 = 현재기준['입찰가격'] - 200 * 입찰률차이
else:  # 10억 이상
    선택가격점수 = 현재기준['입찰가격'] - 100 * 입찰률차이

선택가격점수 = max(0, 선택가격점수)
선택총점 = 점_사업 + 점_지역 + 점_경영상태 + 점_기술자 + 점_계약질서 + 선택가격점수

st.markdown(f"- **선택 입찰가격**: {선택입찰가:,}원")
st.markdown(f"- **선택 입찰률**: {선택입찰률:.4f}")
st.markdown(f"- **선택 입찰가격 점수**: {선택가격점수:.2f} / {현재기준['입찰가격']}")
st.markdown(f"- **선택 총점**: {선택총점:.2f} / 100")

# 낙찰 기준점수 판단 로직
if 기초금액 < 500_000_000:
    기준점수 = 95
    낙찰조건설명 = "95점 이상이어야 하며, 그 중 95점에 가장 근접한 자가 낙찰 대상입니다."
elif 기초금액 < 1_000_000_000:
    기준점수 = 95
    낙찰조건설명 = "95점에 가장 근접한 자가 낙찰 대상입니다."
else:
    기준점수 = 92
    낙찰조건설명 = "92점에 가장 근접한 자가 낙찰 대상입니다."

if 선택총점 < 기준점수:
    st.error(f"❌ 총점 {선택총점:.2f}점은 기준점수 {기준점수}점 미만으로 낙찰 불가")
else:
    차이 = abs(선택총점 - 기준점수)
    st.success(f"✅ 총점 {선택총점:.2f}점 → 기준점수 {기준점수}점과의 차이: {차이:.2f}점")
    st.info(f"📌 {낙찰조건설명}")    


